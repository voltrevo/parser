'use strict';

/* global describe it */

// core modules
var assert = require('assert');

// local modules
var block = require('../../lib/consumers/block.js');
var invalid = require('../../lib/consumers/invalid.js');
var pipe = require('../../lib/consumers/pipe.js');
var single = require('../../lib/consumers/single.js');
var Stream = require('../../lib/streams/stream.js');

describe('pipe', function() {
  it('passes the stream generated by the main consumer to the inner consumer', function() {
    var stream = Stream('{x}');

    var consumer = pipe(
      block(single('{'), single('}')),
      single('x')
    );

    var parseResult = consumer.consume(stream);

    assert.equal(parseResult.accepted, true);
    assert.equal(parseResult.valid, true);
    assert.deepEqual(parseResult.value, 'x');
  });

  it('invalid when the inner consumer is invalid', function() {
    var stream = Stream('{x}');

    var consumer = pipe(
      block(single('{'), single('}')),
      invalid(single('x'))
    );

    var parseResult = consumer.consume(stream);

    assert.equal(parseResult.accepted, true);
    assert.equal(parseResult.valid, false);
    assert.deepEqual(parseResult.value, 'x');
  });

  it('still only invalid (still accepts) when the inner consumer rejects', function() {
    var stream = Stream('{x}');

    var consumer = pipe(
      block(single('{'), single('}')),
      single('y')
    );

    var parseResult = consumer.consume(stream);

    assert.equal(parseResult.accepted, true);
    assert.equal(parseResult.valid, false);
    assert.deepEqual(parseResult.value, undefined);
  });

  it('is invalid when the main consumer is invalid', function() {
    var stream = Stream('{x}');

    var consumer = pipe(
      invalid(block(single('{'), single('}'))),
      single('x')
    );

    var parseResult = consumer.consume(stream);

    assert.equal(parseResult.accepted, true);
    assert.equal(parseResult.valid, false);
    assert.equal(parseResult.value, undefined);
  });
});
